/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : iCal
 #	author : miyako
 #	2014/02/10
 #
 # --------------------------------------------------------------------------------*/

#include "4DPlugin.h"

//global object used to transfer information to callback method 
//because call in same process that had previously access a records gets the old value
//when a record has been modified externally

RecordSpecifier recordSpecifier;
RecordSpecifiers recordSpecifiers;

namespace iCal
{	
	CalendarListener *listener = nil;	
}

#pragma mark -

void _iCal_Count_task_alarms(){
	C_LONGINT returnValue;
	CalCalendarStore *defaultCalendarStore = _getCalendarStore(returnValue);
	
	if(defaultCalendarStore){
		CalTask *task = [defaultCalendarStore taskWithUID:recordSpecifier.uid];
		if(task){ 
			recordSpecifier.count = [[task alarms]count];
			recordSpecifier.isOK = true;	
		}
	}
	recordSpecifier.isDone = true;	
}

void iCal_Count_task_alarms(sLONG_PTR *pResult, PackagePtr pParams){
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	int success = 0;
		
	CalCalendarStore *defaultCalendarStore = _getCalendarStore(returnValue);
	
	if(defaultCalendarStore){
		
		if(!recordSpecifier.isLocked){
			recordSpecifier.isLocked = true;
			recordSpecifier.isDone = false;
			recordSpecifier.isOK = false;
			
			recordSpecifier.uid = Param1.copyUTF16String();
			
			_newProcess((void *)_iCal_Count_task_alarms, 512*1024, @"$iCal_Count_task_alarms");
			
			[recordSpecifier.uid release];
			
			BOOL isDone = false;
			
			while (!isDone){ 
				PA_YieldAbsolute();
				isDone = (PA_IsProcessDying()) || recordSpecifier.isDone;
			}
			
			if(recordSpecifier.isOK){
				Param2.setIntValue(recordSpecifier.count);
				Param2.toParamAtIndex(pParams, 2);
				success = 1;
			}

			recordSpecifier.isLocked = false;	
			
		}else{
			NSLog(@"iCal bridge process is busy");
		}		
	}
	
	returnValue.setIntValue(success);		
	returnValue.setReturn(pResult);
}

void _iCal_Get_task_alarm(){
	C_LONGINT returnValue;
	CalCalendarStore *defaultCalendarStore = _getCalendarStore(returnValue);
	
	if(defaultCalendarStore){
	
		CalTask *task = [defaultCalendarStore taskWithUID:recordSpecifier.uid];
		
		if(task){ 
			int count = [[task alarms]count];
			int index = recordSpecifier.index;
			
			if((count >= index) && (index > 0)){
				CalAlarm *alarm = [[task alarms]objectAtIndex:(NSUInteger)(index - 1)];
				NSString *alarmString = copyAlarmString(alarm);
				recordSpecifier.value.setUTF16String(alarmString);
				[alarmString release];
				recordSpecifier.isOK = true;			
			}else{
				NSLog(@"invalid alarm index: %i", index);				
			}
			
		}		
	}	
	recordSpecifier.isDone = true;
}

void iCal_Get_task_alarm(sLONG_PTR *pResult, PackagePtr pParams){
	C_TEXT Param1;
	C_LONGINT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	int success = 0;
	
	CalCalendarStore *defaultCalendarStore = _getCalendarStore(returnValue);
	
	if(defaultCalendarStore){
		if(!recordSpecifier.isLocked){
			recordSpecifier.isLocked = true;
			recordSpecifier.isDone = false;
			recordSpecifier.isOK = false;
			
			recordSpecifier.uid = Param1.copyUTF16String();
			recordSpecifier.index = Param2.getIntValue();
			
			_newProcess((void *)_iCal_Get_task_alarm, 512*1024, @"$iCal_Get_task_alarm");
		
			[recordSpecifier.uid release];
			
			BOOL isDone = false;
			
			while (!isDone){ 
				PA_YieldAbsolute();
				isDone = (PA_IsProcessDying()) || recordSpecifier.isDone;
			}
			
			if(recordSpecifier.isOK){
				Param3.setUTF16String(recordSpecifier.value.getUTF16StringPtr(), recordSpecifier.value.getUTF16Length());
				Param3.toParamAtIndex(pParams, 3);
				success = 1;
			}
			
			recordSpecifier.isLocked = false;
			
		}else{
			NSLog(@"iCal bridge process is busy");
		}	
	}
	
	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);
}

void _iCal_Get_calendar_property(){
	C_LONGINT returnValue;
	CalCalendarStore *defaultCalendarStore = _getCalendarStore(returnValue);
	
	if(defaultCalendarStore){
		CalCalendar *calendar = _getCalendar(defaultCalendarStore, recordSpecifier.uid, returnValue);
		if(calendar){
			NSArray *calendarProperties = [NSArray arrayWithObjects:
										   @"color", @"isEditable", @"notes", @"title", @"type", nil];
			
			NSUInteger pid = [calendarProperties indexOfObject:recordSpecifier.key];
			NSString *colorString;
			
			switch (pid){
				case 0://color
					colorString = copyColorString(calendar.color);
					recordSpecifier.value.setUTF16String(colorString);	
					[colorString release];					
					recordSpecifier.isOK = true;		
					break;
				case 1://isEditable
					if(calendar.isEditable)
					{
						recordSpecifier.value.setUTF16String(@"YES");	
					}else{
						recordSpecifier.value.setUTF16String(@"NO");		
					}
					recordSpecifier.isOK = true;								
					break;
				case 2://notes
					recordSpecifier.value.setUTF16String(calendar.notes);					
					recordSpecifier.isOK = true;					
					break;
				case 3://title
					recordSpecifier.value.setUTF16String(calendar.title);				
					recordSpecifier.isOK = true;				
					break;
				case 4://type
					recordSpecifier.value.setUTF16String(calendar.type);
					recordSpecifier.isOK = true;			
					break;																
				default:
					break;
			}
		}
	}
	recordSpecifier.isDone = true;
}

void iCal_Get_calendar_property(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
		
	int success = 0;
	
	CalCalendarStore *defaultCalendarStore = _getCalendarStore(returnValue);
	
	if(defaultCalendarStore){
		
		if(!recordSpecifier.isLocked){
			recordSpecifier.isLocked = true;
			recordSpecifier.isDone = false;
			recordSpecifier.isOK = false;
			
			recordSpecifier.uid = Param1.copyUTF16String();
			recordSpecifier.key = Param2.copyUTF16String();

			_newProcess((void *)_iCal_Get_calendar_property, 512*1024, @"$iCal_Get_calendar_property");
			
			[recordSpecifier.uid release];
			[recordSpecifier.key release];
			
			BOOL isDone = false;
			
			while (!isDone){ 
				PA_YieldAbsolute();
				isDone = (PA_IsProcessDying()) || recordSpecifier.isDone;
			}
			
			if(recordSpecifier.isOK){
				Param3.setUTF16String(recordSpecifier.value.getUTF16StringPtr(), recordSpecifier.value.getUTF16Length());
				Param3.toParamAtIndex(pParams, 3);
				success = 1;
			}
			
			recordSpecifier.isLocked = false;	
			
		}else{
			NSLog(@"iCal bridge process is busy");
		}	
	}
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void _iCal_Count_event_alarms(){
	C_LONGINT returnValue;
	CalCalendarStore *defaultCalendarStore = _getCalendarStore(returnValue);
	
	if(defaultCalendarStore){
		CalEvent *event = [defaultCalendarStore eventWithUID:recordSpecifier.uid occurrence:nil];
		if(event){
			recordSpecifier.count = [[event alarms]count];
		} 
	}
	recordSpecifier.isDone = true;		
}

void iCal_Count_event_alarms(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	int success = 0;
	
	CalCalendarStore *defaultCalendarStore = _getCalendarStore(returnValue);
	
	if(defaultCalendarStore){
		
		if(!recordSpecifier.isLocked){
			recordSpecifier.isLocked = true;
			recordSpecifier.isDone = false;
			recordSpecifier.isOK = false;
			
			recordSpecifier.uid = Param1.copyUTF16String();
			
			_newProcess((void *)_iCal_Count_event_alarms, 512*1024, @"$iCal_Count_event_alarms");
			
			[recordSpecifier.uid release];
			
			BOOL isDone = false;
			
			while (!isDone){ 
				PA_YieldAbsolute();
				isDone = (PA_IsProcessDying()) || recordSpecifier.isDone;
			}
			
			if(recordSpecifier.isOK){
				Param2.setIntValue(recordSpecifier.count);
				Param2.toParamAtIndex(pParams, 2);
				success = 1;
			}
			
			recordSpecifier.isLocked = false;
			
		}else{
			NSLog(@"iCal bridge process is busy");
		}
	}
	
	returnValue.setIntValue(success);		
	returnValue.setReturn(pResult);
}

void _iCal_Get_event_alarm(){
	C_LONGINT returnValue;
	CalCalendarStore *defaultCalendarStore = _getCalendarStore(returnValue);
	
	if(defaultCalendarStore){
		CalEvent *event = [defaultCalendarStore eventWithUID:recordSpecifier.uid occurrence:nil];
		if(event){ 
			int count = [[event alarms]count];
			int index = recordSpecifier.index;
			
			if((count >= index) && (index > 0)){
				CalAlarm *alarm = [[event alarms]objectAtIndex:(NSUInteger)(index - 1)];
				NSString *alarmString = copyAlarmString(alarm);
				recordSpecifier.value.setUTF16String(alarmString);
				[alarmString release];
				recordSpecifier.isOK = true;			
			}else{
				NSLog(@"invalid alarm index: %i", index);				
			}
		}		
	}
	recordSpecifier.isDone = true;
}

void iCal_Get_event_alarm(sLONG_PTR *pResult, PackagePtr pParams){
	C_TEXT Param1;
	C_LONGINT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);	
	
	int success = 0;
	
	CalCalendarStore *defaultCalendarStore = _getCalendarStore(returnValue);
	
	if(defaultCalendarStore){
		
		if(!recordSpecifier.isLocked){
			recordSpecifier.isLocked = true;
			recordSpecifier.isDone = false;
			recordSpecifier.isOK = false;
		
			recordSpecifier.uid = Param1.copyUTF16String();
			recordSpecifier.index = Param2.getIntValue();
			
			_newProcess((void *)_iCal_Get_event_alarm, 512*1024, @"$iCal_Get_event_alarm");
			
			[recordSpecifier.uid release];
			
			BOOL isDone = false;
			
			while (!isDone){ 
				PA_YieldAbsolute();
				isDone = (PA_IsProcessDying()) || recordSpecifier.isDone;
			}
			
			if(recordSpecifier.isOK){
				Param3.setUTF16String(recordSpecifier.value.getUTF16StringPtr(), recordSpecifier.value.getUTF16Length());
				Param3.toParamAtIndex(pParams, 3);
				success = 1;
			}
			
			recordSpecifier.isLocked = false;
			
		}else{
			NSLog(@"iCal bridge process is busy");
		}
	}
	
	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);	
}

void _iCal_Get_event_property(){
	C_LONGINT returnValue;
	CalCalendarStore *defaultCalendarStore = _getCalendarStore(returnValue);
	
	if(defaultCalendarStore){
	
		CalEvent *event = [defaultCalendarStore eventWithUID:recordSpecifier.uid occurrence:[NSDate dateWithString:recordSpecifier.date]];	
		NSArray *eventProperties = [NSArray arrayWithObjects:
									@"isAllDay", @"isDetached", 
									@"location", @"occurrence", 
									@"recurrenceRule" ,@"startDate", 
									@"calendar", @"hasAlarm", 
									@"nextAlarmDate", @"dateStamp", 
									@"notes", @"title", 
									@"url", @"endDate", 
									@"attendees", nil];	
		if(event){
			NSUInteger pid = [eventProperties indexOfObject:recordSpecifier.key];
			NSString *attendees = nil;
			switch (pid){
				case 0://isAllDay
					if(event.isAllDay)
					{
						recordSpecifier.value.setUTF16String(@"YES");
					}else{
						recordSpecifier.value.setUTF16String(@"NO");	
					}
					recordSpecifier.isOK = true;						
					break;
				case 1://isDetached
					if(event.isDetached)
					{
						recordSpecifier.value.setUTF16String(@"YES");
					}else{
						recordSpecifier.value.setUTF16String(@"NO");	
					}
					recordSpecifier.isOK = true;						
					break;
				case 2://location
					recordSpecifier.value.setUTF16String(event.location);	
					recordSpecifier.isOK = true;					
					break;
				case 3://occurrence 
					recordSpecifier.value.setUTF16String([event.occurrence description]);					
					recordSpecifier.isOK = true;		
					break;
				case 4://recurrenceRule
					recordSpecifier.value.setUTF16String([event.recurrenceRule description]);					
					recordSpecifier.isOK = true;			
					break;
				case 5://startDate
					recordSpecifier.value.setUTF16String([event.startDate description]);					
					recordSpecifier.isOK = true;				
					break;
				case 6://calendar
					recordSpecifier.value.setUTF16String([event.calendar uid]);					
					recordSpecifier.isOK = true;
					break;
				case 7://hasAlarm
					if(event.hasAlarm)
					{
						recordSpecifier.value.setUTF16String(@"YES");	
					}else{
						recordSpecifier.value.setUTF16String(@"NO");		
					}
					recordSpecifier.isOK = true;			
					break;
				case 8://nextAlarmDate 
					recordSpecifier.value.setUTF16String([event.nextAlarmDate description]);		
					recordSpecifier.isOK = true;								
					break;
				case 9://dateStamp
					recordSpecifier.value.setUTF16String([event.dateStamp description]);					
					recordSpecifier.isOK = true;					
					break;																																																								
				case 10://notes
					recordSpecifier.value.setUTF16String(event.notes);						
					recordSpecifier.isOK = true;				
					break;
				case 11://title
					recordSpecifier.value.setUTF16String(event.title);									
					recordSpecifier.isOK = true;				
					break;
				case 12://url
					recordSpecifier.value.setUTF16String([event.url absoluteString]);									
					recordSpecifier.isOK = true;
					break;
				case 13://endDate
					recordSpecifier.value.setUTF16String([event.endDate description]);					
					recordSpecifier.isOK = true;
					break;				
				case 14://attendees
					attendees = copyAttendeesDictionary(event.attendees);
					recordSpecifier.value.setUTF16String(attendees);
					[attendees release];
					recordSpecifier.isOK = true;
				default:
					break;
			}		
		}
	}
	recordSpecifier.isDone = true;
}

void iCal_Get_event_property(sLONG_PTR *pResult, PackagePtr pParams){
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_TEXT Param4;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param4.fromParamAtIndex(pParams, 4);
	
	int success = 0;
	
	CalCalendarStore *defaultCalendarStore = _getCalendarStore(returnValue);
	
	if(defaultCalendarStore){
		
		if(!recordSpecifier.isLocked){
			recordSpecifier.isLocked = true;
			recordSpecifier.isDone = false;
			recordSpecifier.isOK = false;
			
			recordSpecifier.uid = Param1.copyUTF16String();
			recordSpecifier.key = Param2.copyUTF16String();
			recordSpecifier.date = Param4.copyUTF16String();
			
			_newProcess((void *)_iCal_Get_event_property, 512*1024, @"$iCal_Get_event_property");
			
			[recordSpecifier.uid release];
			[recordSpecifier.key release];
			[recordSpecifier.date release];
			
			BOOL isDone = false;
			
			while (!isDone){ 
				PA_YieldAbsolute();
				isDone = (PA_IsProcessDying()) || recordSpecifier.isDone;
			}
			
			if(recordSpecifier.isOK){
				Param3.setUTF16String(recordSpecifier.value.getUTF16StringPtr(), recordSpecifier.value.getUTF16Length());
				Param3.toParamAtIndex(pParams, 3);
				success = 1;
			}
			
			recordSpecifier.isLocked = false;			
		}else{
			NSLog(@"iCal bridge process is busy");
		}	
	}
	
	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);
}

#pragma mark -

void listenerLoopFinish(){
	
	if(iCal::listener){
		[[NSNotificationCenter defaultCenter]removeObserver:iCal::listener];
		[iCal::listener release];
		iCal::listener = nil;
	}	
	
}

void listenerLoopExecuteMethodByID()
{
	PA_Variable	params[4];
	params[0] = PA_CreateVariable(eVK_Unistring);		
	params[1] = PA_CreateVariable(eVK_Unistring);	
	params[2] = PA_CreateVariable(eVK_Unistring);					
	params[3] = PA_CreateVariable(eVK_Unistring);	
	
	PA_Unistring u1 = _setUnistringVariable(&params[0], iCal::listener.insertedRecordsString);
	PA_Unistring u2 = _setUnistringVariable(&params[1], iCal::listener.updatedRecordsString);
	PA_Unistring u3 = _setUnistringVariable(&params[2], iCal::listener.deletedRecordsString);
	PA_Unistring u4 = _setUnistringVariable(&params[3], iCal::listener.notificationType);				
	
	PA_ExecuteMethodByID([iCal::listener.listenerMethodId intValue], params, 4);
	
	[iCal::listener unlock];
	
	PA_DisposeUnistring(&u1);
	PA_DisposeUnistring(&u2);
	PA_DisposeUnistring(&u3);
	PA_DisposeUnistring(&u4);	
}

void listenerLoop(){
	
	PA_YieldAbsolute();	
	int listenerProcessNumber = PA_GetCurrentProcessNumber();
	PA_FreezeProcess(listenerProcessNumber);
	
	char done = 0;
	
	while (!done)
	{ 
		PA_YieldAbsolute();
		done = (PA_IsProcessDying()) || ([iCal::listener shouldTerminate]);
		
		if (!done){		
			
			_newProcess((void *)listenerLoopExecuteMethodByID, 512*1024, iCal::listener.notificationType);
			
			PA_FreezeProcess(listenerProcessNumber);
			
		}
	}
	
	listenerLoopFinish();
	
	PA_KillProcess();
}

#pragma mark -

void PluginMain(int32_t selector, PA_PluginParameters params)
{
	try
	{
		int32_t pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		switch(selector){
			case 30 :
				PA_RunInMainProcess((PA_RunInMainProcessProcPtr)iCal_SHOW_EVENT, params);	
				break;
				
			case 31 :
				PA_RunInMainProcess((PA_RunInMainProcessProcPtr)iCal_SHOW_TASK, params);
				break;
				
			case 32 :
				PA_RunInMainProcess((PA_RunInMainProcessProcPtr)iCal_SET_VIEW, params);
				break;
				
			case 33 :
				PA_RunInMainProcess((PA_RunInMainProcessProcPtr)iCal_SHOW_DATE, params);
				break;		
			default:
				CommandDispatcher(pProcNum, pResult, pParams); 	
				break;
		}

	}
	catch(...)
	{

	}
}

void CommandDispatcher (int32_t pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
		case kDeinitPlugin:
		case kServerDeinitPlugin:
			listenerLoopFinish();
			break;			
// --- Event

		case 1 :
			iCal_Create_event(pResult, pParams);
			break;

		case 2 :
			iCal_Set_event_property(pResult, pParams);
			break;

		case 3 :
			iCal_Get_event_property(pResult, pParams);
			break;

		case 4 :
			iCal_Remove_event(pResult, pParams);
			break;

// --- Task

		case 5 :
			iCal_Create_task(pResult, pParams);
			break;

		case 6 :
			iCal_Set_task_property(pResult, pParams);
			break;

		case 7 :
			iCal_Get_task_property(pResult, pParams);
			break;

		case 8 :
			iCal_Remove_task(pResult, pParams);
			break;

// --- Calendar

		case 9 :
			iCal_Create_calendar(pResult, pParams);
			break;

		case 10 :
			iCal_Set_calendar_property(pResult, pParams);
			break;

		case 11 :
			iCal_Get_calendar_property(pResult, pParams);
			break;

		case 12 :
			iCal_Remove_calendar(pResult, pParams);
			break;

// --- Calendar Store

		case 13 :
			iCal_QUERY_EVENT(pResult, pParams);
			break;

		case 14 :
			iCal_GET_CALENDAR_LIST(pResult, pParams);
			break;

		case 15 :
			iCal_QUERY_TASK(pResult, pParams);
			break;

// --- Type Cast

		case 16 :
			iCal_Make_date(pResult, pParams);
			break;

		case 17 :
			iCal_GET_DATE(pResult, pParams);
			break;

		case 18 :
			iCal_Make_color(pResult, pParams);
			break;

		case 19 :
			iCal_GET_COLOR(pResult, pParams);
			break;

		case 20 :
			iCal_Make_color_from_index(pResult, pParams);
			break;

// --- Recurrence Rule

		case 21 :
			iCal_Remove_event_recurrence(pResult, pParams);
			break;

		case 22 :
			iCal_Set_event_recurrence(pResult, pParams);
			break;

// --- Alarm

		case 23 :
			iCal_Make_alarm(pResult, pParams);
			break;

		case 24 :
			iCal_Get_alarm_property(pResult, pParams);
			break;

		case 25 :
			iCal_Set_alarm_property(pResult, pParams);
			break;

		case 26 :
			iCal_Add_alarm_to_event(pResult, pParams);
			break;

		case 27 :
			iCal_Add_alarm_to_task(pResult, pParams);
			break;

// --- Application

		case 28 :
			iCal_TERMINATE(pResult, pParams);
			break;

		case 29 :
			iCal_LAUNCH(pResult, pParams);
			break;

// --- iCal Direct

		case 30 :
		//	iCal_SHOW_EVENT(pResult, pParams);
			break;

		case 31 :
		//	iCal_SHOW_TASK(pResult, pParams);
			break;

		case 32 :
		//	iCal_SET_VIEW(pResult, pParams);
			break;

		case 33 :
		//	iCal_SHOW_DATE(pResult, pParams);
			break;

		case 34 :
			iCal_app_Get_task_property(pResult, pParams);
			break;

		case 35 :
			iCal_app_Get_event_property(pResult, pParams);
			break;

// --- Notification

		case 36 :
			iCal_Set_notification_method(pResult, pParams);
			break;

		case 37 :
			iCal_Get_notification_method(pResult, pParams);
			break;

// --- Alarm II

		case 38 :
			iCal_Get_event_alarm(pResult, pParams);
			break;

		case 39 :
			iCal_Count_event_alarms(pResult, pParams);
			break;

		case 40 :
			iCal_Remove_event_alarm(pResult, pParams);
			break;

		case 41 :
			iCal_Set_event_alarm(pResult, pParams);
			break;

		case 42 :
			iCal_Count_task_alarms(pResult, pParams);
			break;

		case 43 :
			iCal_Get_task_alarm(pResult, pParams);
			break;

		case 44 :
			iCal_Remove_task_alarm(pResult, pParams);
			break;

		case 45 :
			iCal_Set_task_alarm(pResult, pParams);
			break;

// --- Timezone

		case 46 :
			iCal_TIMEZONE_LIST(pResult, pParams);
			break;

		case 47 :
			iCal_Get_timezone_info(pResult, pParams);
			break;

		case 48 :
			iCal_Get_timezone_for_offset(pResult, pParams);
			break;

		case 49 :
			iCal_Get_system_timezone(pResult, pParams);
			break;
			
			// --- Event II
			
		case 50 :
			iCal_Set_event_properties(pResult, pParams);
			break;			
	}
}

#pragma mark -

void iCal_Set_notification_method(sLONG_PTR *pResult, PackagePtr pParams){
	C_TEXT methodName;
	C_LONGINT returnValue;
	
	methodName.fromParamAtIndex(pParams, 1);
	
	int success = 0;
	
	if(!methodName.getUTF16Length()){
		
		if(iCal::listener){
			[iCal::listener terminate];
			success = 1;
		}
		
	}else{
		
		NSString *_methodName = methodName.copyUTF16String();
		
		int methodId = PA_GetMethodID((PA_Unichar *)methodName.getUTF16StringPtr());
		
		if(methodId){
			
			success = 1;
			
			if(!iCal::listener){		
				
				int iCalListenerProcessNumber = _newProcess((void *)listenerLoop, -512*1024, @"$iCal Notification Process");
				
				iCal::listener = [[CalendarListener alloc]
										   initWithMethodName:_methodName
										   methodId:[NSNumber numberWithInt:methodId]
										   processNumber:[NSNumber numberWithInt:iCalListenerProcessNumber]];
				
				[[NSNotificationCenter defaultCenter]
				 addObserver:iCal::listener 
				 selector:@selector(eventsChanged:)
				 name:CalEventsChangedExternallyNotification 
				 object:[CalCalendarStore defaultCalendarStore]];	
				
				 [[NSNotificationCenter defaultCenter]
				 addObserver:iCal::listener 
				 selector:@selector(eventsChanged:)
				 name:CalEventsChangedNotification 
				 object:[CalCalendarStore defaultCalendarStore]];	

				 [[NSNotificationCenter defaultCenter]
				 addObserver:iCal::listener 
				 selector:@selector(tasksChanged:)
				 name:CalTasksChangedExternallyNotification 
				 object:[CalCalendarStore defaultCalendarStore]];	
 
				 [[NSNotificationCenter defaultCenter]
				 addObserver:iCal::listener 
				 selector:@selector(calendarsChanged:)
				 name:CalCalendarsChangedExternallyNotification 
				 object:[CalCalendarStore defaultCalendarStore]];
				
			}else{
				iCal::listener.listenerMethodName = _methodName;				
				iCal::listener.listenerMethodId = [NSNumber numberWithInt:methodId];				
			}
			
		}
		
		[_methodName release];
		
	}
	
	returnValue.setReturn(pResult);	
}

void iCal_Get_notification_method(sLONG_PTR *pResult, PackagePtr pParams){
	C_TEXT methodName;
	C_LONGINT returnValue;
	
	int success = 0;
	
	if(iCal::listener){
		methodName.setUTF16String(iCal::listener.listenerMethodName);
		success = 1;		
	}
	
	methodName.toParamAtIndex(pParams, 1);
	returnValue.setReturn(pResult);
}

#pragma mark -