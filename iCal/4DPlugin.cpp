/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : iCal
 #	author : miyako
 #	11/07/08
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#if VERSIONMAC
#include <Cocoa/Cocoa.h>
#include <CalendarStore/CalendarStore.h>
#include "ical_support.h"
#include "listener.h"
iCalListener *listener = nil;
#endif

void PluginMain(int32_t selector, PA_PluginParameters params)
{
	try
	{
		int32_t pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (int32_t pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
#if VERSIONMAC	
	switch(pProcNum)
	{				
		case kDeinitPlugin:
			if(listener)
			{
				[listener terminate];
			}
			break;			
			// --- Event
			
		case 1 :
			iCal_Create_event(pResult, pParams);
			break;
			
		case 2 :
			iCal_Set_event_property(pResult, pParams);
			break;
			
		case 3 :
			iCal_Get_event_property(pResult, pParams);
			break;
			
		case 4 :
			iCal_Remove_event(pResult, pParams);
			break;
			
			// --- Task
			
		case 5 :
			iCal_Create_task(pResult, pParams);
			break;
			
		case 6 :
			iCal_Set_task_property(pResult, pParams);
			break;
			
		case 7 :
			iCal_Get_task_property(pResult, pParams);
			break;
			
		case 8 :
			iCal_Remove_task(pResult, pParams);
			break;
			
			// --- Calendar
			
		case 9 :
			iCal_Create_calendar(pResult, pParams);
			break;
			
		case 10 :
			iCal_Set_calendar_property(pResult, pParams);
			break;
			
		case 11 :
			iCal_Get_calendar_property(pResult, pParams);
			break;
			
		case 12 :
			iCal_Remove_calendar(pResult, pParams);
			break;
			
			// --- Calendar Store
			
		case 13 :
			iCal_QUERY_EVENT(pResult, pParams);
			break;
			
		case 14 :
			iCal_GET_CALENDAR_LIST(pResult, pParams);
			break;
			
		case 15 :
			iCal_QUERY_TASK(pResult, pParams);
			break;
			
			// --- Type Cast
			
		case 16 :
			iCal_Make_date(pResult, pParams);
			break;
			
		case 17 :
			iCal_GET_DATE(pResult, pParams);
			break;
			
		case 18 :
			iCal_Make_color(pResult, pParams);
			break;
			
		case 19 :
			iCal_GET_COLOR(pResult, pParams);
			break;
			
		case 20 :
			iCal_Make_color_from_index(pResult, pParams);
			break;
			
			// --- Recurrence Rule
			
		case 21 :
			iCal_Remove_event_recurrence(pResult, pParams);
			break;
			
		case 22 :
			iCal_Set_event_recurrence(pResult, pParams);
			break;
			
			// --- Alarm
			
		case 23 :
			iCal_Make_alarm(pResult, pParams);
			break;
			
		case 24 :
			iCal_Get_alarm_property(pResult, pParams);
			break;
			
		case 25 :
			iCal_Set_alarm_property(pResult, pParams);
			break;
			
		case 26 :
			iCal_Add_alarm_to_event(pResult, pParams);
			break;
			
		case 27 :
			iCal_Add_alarm_to_task(pResult, pParams);
			break;
			
			// --- Application
			
		case 28 :
			iCal_TERMINATE(pResult, pParams);
			break;
			
		case 29 :
			iCal_LAUNCH(pResult, pParams);
			break;
			
			// --- iCal Direct
			
		case 30 :
			iCal_SHOW_EVENT(pResult, pParams);
			break;
			
		case 31 :
			iCal_SHOW_TASK(pResult, pParams);
			break;
			
		case 32 :
			iCal_SET_VIEW(pResult, pParams);
			break;
			
		case 33 :
			iCal_SHOW_DATE(pResult, pParams);
			break;
			
		case 34 :
			iCal_app_Get_task_property(pResult, pParams);
			break;
			
		case 35 :
			iCal_app_Get_event_property(pResult, pParams);
			break;
			
			// --- Notification
			
		case 36 :
			iCal_Set_notification_method(pResult, pParams);
			break;
			
		case 37 :
			iCal_Get_notification_method(pResult, pParams);
			break;
			
			// --- Alarm II
			
		case 38 :
			iCal_Get_event_alarm(pResult, pParams);
			break;
			
		case 39 :
			iCal_Count_event_alarms(pResult, pParams);
			break;
			
		case 40 :
			iCal_Remove_event_alarm(pResult, pParams);
			break;
			
		case 41 :
			iCal_Set_event_alarm(pResult, pParams);
			break;
			
		case 42 :
			iCal_Count_task_alarms(pResult, pParams);
			break;
			
		case 43 :
			iCal_Get_task_alarm(pResult, pParams);
			break;
			
		case 44 :
			iCal_Remove_task_alarm(pResult, pParams);
			break;
			
		case 45 :
			iCal_Set_task_alarm(pResult, pParams);
			break;
	}
#endif	
}

#if VERSIONMAC

PA_Unistring _setUnistringVariable(PA_Variable *v, NSString *s)
{
	C_TEXT t;
	t.setUTF16String(s);	
	PA_Unistring u = PA_CreateUnistring((PA_Unichar *)t.getUTF16StringPtr());
	PA_SetStringVariable(v, &u);
	return u;
}

int PA_NewProcess(void* procPtr, int stackSize, NSString *name )
{
	C_TEXT t;
	t.setUTF16String(name);
	
	return PA_NewProcess(procPtr, stackSize, (PA_Unichar *)t.getUTF16StringPtr());	
}

void _iCalListenerLoopCall4D()
{
	PA_Variable	params[4];
	params[0] = PA_CreateVariable(eVK_Unistring);		
	params[1] = PA_CreateVariable(eVK_Unistring);	
	params[2] = PA_CreateVariable(eVK_Unistring);					
	params[3] = PA_CreateVariable(eVK_Unistring);	
	
	PA_Unistring u1 = _setUnistringVariable(&params[0], listener.insertedRecordsString);
	PA_Unistring u2 = _setUnistringVariable(&params[1], listener.updatedRecordsString);
	PA_Unistring u3 = _setUnistringVariable(&params[2], listener.deletedRecordsString);
	PA_Unistring u4 = _setUnistringVariable(&params[3], listener.notificationType);				
	
	PA_ExecuteMethodByID([listener.listenerMethodId intValue], params, 4);
	
	PA_DisposeUnistring(&u1);
	PA_DisposeUnistring(&u2);
	PA_DisposeUnistring(&u3);
	PA_DisposeUnistring(&u4);	
}

void iCalListenerLoop(){
	
	PA_YieldAbsolute();	
	int iCalListenerProcess = PA_GetCurrentProcessNumber();
	PA_FreezeProcess(iCalListenerProcess);
	
	char done = 0;
	
	while (!done)
	{ 
		PA_YieldAbsolute();
		done = (PA_IsProcessDying()) || ([listener shouldTerminate]);
		
		if (!done){		
			
			PA_NewProcess((void * )_iCalListenerLoopCall4D, 512*1024, listener.notificationType);
			PA_FreezeProcess(iCalListenerProcess);
			
		}
	}
	
	[[NSNotificationCenter defaultCenter]removeObserver:listener];
	[listener release];
	listener = nil;
	
	PA_KillProcess();
}

// ------------------------------------- Event ------------------------------------

void iCal_Create_event(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	// --- write the code of iCal_Create_event here...

	NSError *error = nil;
	
	NSString *calendarId = Param1.copyUTF16String();
	NSString *startDateString = Param2.copyUTF16String();
	NSString *endDateString = Param3.copyUTF16String();

	CalCalendar *calendar = [[CalCalendarStore defaultCalendarStore]calendarWithUID:calendarId];
	
	if(calendar)
	{		
		CalEvent *event = [CalEvent event];
		NSDate *startDate = [NSDate dateWithString:startDateString];
		NSDate *endDate = [NSDate dateWithString:endDateString];
		
		event.calendar = calendar;
		
		if((startDate) && (endDate))
		{
			event.startDate = startDate;
			event.endDate = endDate;

			[[CalCalendarStore defaultCalendarStore]saveEvent:event span:CalSpanThisEvent error:&error];
			
			if(error)	
			{
				NSLog(@"can't save event: %@", [error localizedDescription]);
			}else{
				returnValue.setUTF16String([event uid]);
			}			
		}else{
			NSLog(@"invalid start date: %@, end date: %@", startDateString, endDateString);		
		}
	}else{
		NSLog(@"invalid calendar: %@", calendarId);	
	}
	
	[calendarId release];
	[startDateString release];
	[endDateString release];	
	
	returnValue.setReturn(pResult);
}

void iCal_Set_event_property(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_TEXT Param4;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);

	// --- write the code of iCal_Set_event_property here...

	int success = 0;
	
	NSError *error = nil;
	
	NSString *uid = Param1.copyUTF16String();
	NSString *key = Param2.copyUTF16String();
	NSString *value = Param3.copyUTF16String();
	NSString *date = Param4.copyUTF16String();
	
	CalEvent *event;
	CalCalendar *calendar;
	NSURL *url;
	
	event = [[CalCalendarStore defaultCalendarStore]eventWithUID:uid occurrence:[NSDate dateWithString:date]];
	
	NSArray *eventProperties = [NSArray arrayWithObjects:
								@"isAllDay", @"isDetached", 
								@"location", @"occurrence", 
								@"recurrenceRule" ,@"startDate", 
								@"calendar", @"hasAlarm", 
								@"nextAlarmDate", @"dateStamp", 
								@"notes", @"title", 
								@"url", @"endDate", nil];
	
	if(event)
	{
		NSUInteger pid = [eventProperties indexOfObject:key];
		
		switch (pid)
		{
			case 0://isAllDay
				event.isAllDay = [value boolValue];		
				success = [[CalCalendarStore defaultCalendarStore]saveEvent:event span:CalSpanThisEvent error:&error];
				break;
			case 1://isDetached (readonly)			
				break;
			case 2://location
				event.location = value;	
				success = [[CalCalendarStore defaultCalendarStore]saveEvent:event span:CalSpanThisEvent error:&error];					
				break;
			case 3://occurrence (readonly) 
				break;
			case 4://recurrenceRule (dedicated command)
				break;
			case 5://startDate
				if([NSDate dateWithString:value]){
					event.startDate = [NSDate dateWithString:value];
					success = [[CalCalendarStore defaultCalendarStore]saveEvent:event span:CalSpanThisEvent error:&error];
				}
				break;
			case 6://calendar
				calendar = [[CalCalendarStore defaultCalendarStore]calendarWithUID:value];
				if(calendar)
				{
					event.calendar = calendar;
					success = [[CalCalendarStore defaultCalendarStore]saveEvent:event span:CalSpanThisEvent error:&error];	
				}
				break;
			case 7://hasAlarm (readonly)
				break;
			case 8://nextAlarmDate (readonly)
				break;
			case 9://dateStamp (readonly)
				break;																																																								
			case 10://notes
				event.notes = value;	
				success = [[CalCalendarStore defaultCalendarStore]saveEvent:event span:CalSpanThisEvent error:&error];			
				break;
			case 11://title
				event.title = value;	
				success = [[CalCalendarStore defaultCalendarStore]saveEvent:event span:CalSpanThisEvent error:&error];						
				break;
			case 12://url
				url = [NSURL URLWithString:value];
				if(url)
				{
					event.url = url;
					success = [[CalCalendarStore defaultCalendarStore]saveEvent:event span:CalSpanThisEvent error:&error];
				}
				break;
			case 13://endDate
				if([NSDate dateWithString:value]){
					event.endDate = [NSDate dateWithString:value];	
					success = [[CalCalendarStore defaultCalendarStore]saveEvent:event span:CalSpanThisEvent error:&error];
				}			
				break;				
				
			default:
				break;
		}		
		
	}
	
	if(error)	
	{
		success = [error code];
		NSLog(@"can't update event: %@", [error localizedDescription]);
	}
	
	[uid release];
	[key release];
	[value release];
	[date release];	
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
	
}

void iCal_Get_event_property(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_TEXT Param4;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param4.fromParamAtIndex(pParams, 4);

	// --- write the code of iCal_Get_event_property here...

	int success = 0;
	
	NSString *uid = Param1.copyUTF16String();
	NSString *key = Param2.copyUTF16String();
	NSString *date = Param4.copyUTF16String();
	
	CalEvent *event;
	
	event = [[CalCalendarStore defaultCalendarStore]eventWithUID:uid occurrence:[NSDate dateWithString:date]];
		
	NSArray *eventProperties = [NSArray arrayWithObjects:
								@"isAllDay", @"isDetached", 
								@"location", @"occurrence", 
								@"recurrenceRule" ,@"startDate", 
								@"calendar", @"hasAlarm", 
								@"nextAlarmDate", @"dateStamp", 
								@"notes", @"title", 
								@"url", @"endDate", 
								@"attendees", nil];
	
	if(event)
	{
		NSUInteger pid = [eventProperties indexOfObject:key];
		NSString *attendees = nil;
		
		switch (pid)
		{
			case 0://isAllDay
				if(event.isAllDay)
				{
					Param3.setUTF16String(@"YES");
				}else{
					Param3.setUTF16String(@"NO");	
				}
				success = 1;						
				break;
			case 1://isDetached
				if(event.isDetached)
				{
					Param3.setUTF16String(@"YES");
				}else{
					Param3.setUTF16String(@"NO");	
				}
				success = 1;						
				break;
			case 2://location
				Param3.setUTF16String(event.location);	
				success = 1;					
				break;
			case 3://occurrence 
				Param3.setUTF16String([event.occurrence description]);					
				success = 1;			
				break;
			case 4://recurrenceRule
				Param3.setUTF16String([event.recurrenceRule description]);					
				success = 1;			
				break;
			case 5://startDate
				Param3.setUTF16String([event.startDate description]);					
				success = 1;				
				break;
			case 6://calendar
				Param3.setUTF16String([event.calendar uid]);					
				success = 1;
				break;
			case 7://hasAlarm
				if(event.hasAlarm)
				{
					Param3.setUTF16String(@"YES");	
				}else{
					Param3.setUTF16String(@"NO");		
				}
				success = 1;			
				break;
			case 8://nextAlarmDate 
				Param3.setUTF16String([event.nextAlarmDate description]);		
				success = 1;								
				break;
			case 9://dateStamp
				Param3.setUTF16String([event.dateStamp description]);					
				success = 1;					
				break;																																																								
			case 10://notes
				Param3.setUTF16String(event.notes);						
				success = 1;				
				break;
			case 11://title
				Param3.setUTF16String(event.title);									
				success = 1;				
				break;
			case 12://url
				Param3.setUTF16String([event.url absoluteString]);									
				success = 1;
				break;
			case 13://endDate
				Param3.setUTF16String([event.endDate description]);					
				success = 1;	
				break;				
			case 14://attendees
				attendees = copyAttendeesDictionary(event.attendees);
				Param3.setUTF16String(attendees);
				[attendees release];
				success = 1;
			default:
				break;
		}		
	}
	
	[uid release];
	[key release];
	[date release];		
	
	if(success)
		Param3.toParamAtIndex(pParams, 3);
	
	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);
	
}

void iCal_Remove_event(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	// --- write the code of iCal_Remove_event here...

	int success = 0;
	NSError *error = nil;
	
	NSString *eventId = Param1.copyUTF16String();
	
	CalEvent *event = [[CalCalendarStore defaultCalendarStore]eventWithUID:eventId occurrence:nil];
	
	if(event) success = [[CalCalendarStore defaultCalendarStore]removeEvent:event span:CalSpanAllEvents error:&error];
	
	if(error)	
	{
		success = [error code];
		NSLog(@"can't remove event: %@", [error localizedDescription]);
	}
	
	[eventId release];
	
	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);
}

void iCal_Get_event_alarm(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	// --- write the code of iCal_Get_event_alarm here...

	int success = 0;
	NSError *error = nil;
	
	NSString *eventId = Param1.copyUTF16String();
	
	CalEvent *event = [[CalCalendarStore defaultCalendarStore]eventWithUID:eventId occurrence:nil];
	
	if(event){ 
		int count = [[event alarms]count];
		int index = Param2.getIntValue();
		
		if((count >= Param2.getIntValue()) && (index > 0)){
			CalAlarm *alarm = [[event alarms]objectAtIndex:(NSUInteger)(index - 1)];
			NSString *alarmString = copyAlarmString(alarm);
			Param3.setUTF16String(alarmString);
			[alarmString release];
			success = 1;			
		}else{
			NSLog(@"invalid alarm index: %@", index);				
		}
		
	}else{
		success = [error code];
		NSLog(@"invalid event: %@", eventId);	
	}

	[eventId release];
	
	Param3.toParamAtIndex(pParams, 3);
	
	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);
}

void iCal_Count_event_alarms(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	// --- write the code of iCal_Count_event_alarms here...

	int success = 0;
	NSError *error = nil;
	
	NSString *eventId = Param1.copyUTF16String();
	
	CalEvent *event = [[CalCalendarStore defaultCalendarStore]eventWithUID:eventId occurrence:nil];
	
	if(event){ 
		Param2.setIntValue([[event alarms]count]);
		success = 1;
	}else{
		success = [error code];
		NSLog(@"invalid event: %@", eventId);	
	}

	[eventId release];
	
	Param2.toParamAtIndex(pParams, 2);
	
	returnValue.setIntValue(success);		
	returnValue.setReturn(pResult);
}

void iCal_Remove_event_alarm(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	// --- write the code of iCal_Remove_event_alarm here...

	int success = 0;
	NSError *error = nil;
	
	NSString *eventId = Param1.copyUTF16String();
	
	CalEvent *event = [[CalCalendarStore defaultCalendarStore]eventWithUID:eventId occurrence:nil];
	
	if(event){ 
		int count = [[event alarms]count];
		int index = Param2.getIntValue();
		
		if((count >= Param2.getIntValue()) && (index > 0)){
			CalAlarm *alarm = [[event alarms]objectAtIndex:(NSUInteger)(index - 1)];
			[event removeAlarm:alarm];
			success = 1;			
		}else{
			NSLog(@"invalid alarm index: %@", index);				
		}
		
	}else{
		success = [error code];
		NSLog(@"invalid event: %@", eventId);	
	}
	
	[eventId release];	

	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);
}

void iCal_Set_event_alarm(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	
	// --- write the code of iCal_Set_event_alarm here...

	int success = 0;
	NSError *error = nil;
	
	NSString *eventId = Param1.copyUTF16String();
	NSString *dictionary = Param3.copyUTF16String();	
	
	CalEvent *event = [[CalCalendarStore defaultCalendarStore]eventWithUID:eventId occurrence:nil];
	
	if(event){ 
				
		int count = [[event alarms]count];
		int index = Param2.getIntValue();
		
		if((count >= Param2.getIntValue()) && (index > 0)){
			
			NSMutableArray *alarms = [[event alarms]mutableCopy];		
			CalAlarm *newAlarm = getAlarmFromString(dictionary);
			
			if(newAlarm){
				
				[alarms replaceObjectAtIndex:(NSUInteger)(index - 1) withObject:newAlarm];
				[event removeAlarms:[event alarms]];
				[event addAlarms:alarms];
				success = [[CalCalendarStore defaultCalendarStore]saveEvent:event span:CalSpanThisEvent error:&error];				
			}
			
			[alarms release];
			
		}else{
			NSLog(@"invalid alarm index: %@", index);				
		}
		
	}else{
		success = [error code];
		NSLog(@"invalid event: %@", eventId);	
	}
	
	[eventId release];
	[dictionary release];

	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);
}

// ------------------------------------- Task -------------------------------------


void iCal_Create_task(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	// --- write the code of iCal_Create_task here...

	NSError *error = nil;
	
	NSString *calendarId = Param1.copyUTF16String();
	NSString *dueDateString = Param2.copyUTF16String();
	
	CalCalendar *calendar = [[CalCalendarStore defaultCalendarStore]calendarWithUID:calendarId];
	
	if(calendar)
	{		
		CalTask *task = [CalTask task];
		task.calendar = calendar;
		
		NSDate *dueDate = [NSDate dateWithString:dueDateString]; 
		
		if(dueDate) task.dueDate = dueDate;	
		
		[[CalCalendarStore defaultCalendarStore]saveTask:task error:&error];

		if(error)	
		{
			NSLog(@"can't save task: %@", [error localizedDescription]);
		}else{
			returnValue.setUTF16String([task uid]);
		}
	
	}else{
		NSLog(@"invalid calendar: %@", calendarId);	
	}
	
	[calendarId release];
	[dueDateString release];
	
	returnValue.setReturn(pResult);
}

void iCal_Set_task_property(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	
	// --- write the code of iCal_Set_task_property here...

	int success = 0;
	NSError *error = nil;
	
	NSString *uid = Param1.copyUTF16String();
	NSString *key = Param2.copyUTF16String();
	NSString *value = Param3.copyUTF16String();
	
	CalCalendar *calendar;
	NSURL *url;
	
	CalTask *task = [[CalCalendarStore defaultCalendarStore]taskWithUID:uid];
	
	NSArray *taskProperties = [NSArray arrayWithObjects:
							   @"dueDate", @"isCompleted", 
							   @"priority", @"completedDate" ,
							   @"hasAlarm", @"nextAlarmDate", 
							   @"calendar", @"dateStamp", 
							   @"notes", @"title", 
							   @"url", nil];
	
	if(task)
	{
		NSUInteger pid = [taskProperties indexOfObject:key];
		
		switch (pid)
		{
			case 0://dueDate
					task.dueDate = [NSDate dateWithString:value];		
					success = [[CalCalendarStore defaultCalendarStore]saveTask:task error:&error];
				break;
			case 1://isCompleted
				task.isCompleted = [value boolValue];
				success = [[CalCalendarStore defaultCalendarStore]saveTask:task error:&error];				
				break;
			case 2://priority
				task.priority = [value integerValue];
				success = [[CalCalendarStore defaultCalendarStore]saveTask:task error:&error];					
				break;
			case 3://completedDate
					task.completedDate = [NSDate dateWithString:value];		
					success = [[CalCalendarStore defaultCalendarStore]saveTask:task error:&error];	
				break;
			case 4://hasAlarm (readonly)		
				break;
			case 5://nextAlarmDate (readonly)								
				break;
			case 6://calendar
				calendar = [[CalCalendarStore defaultCalendarStore]calendarWithUID:value];
				if(calendar){
					task.calendar = calendar;
					success = [[CalCalendarStore defaultCalendarStore]saveTask:task error:&error];	
				}			
				break;
			case 7://dateStamp (readonly)
				break;																																																								
			case 8://notes	
				task.notes = value;		
				success = [[CalCalendarStore defaultCalendarStore]saveTask:task error:&error];						
				break;
			case 9://title	
				task.title = value;		
				success = [[CalCalendarStore defaultCalendarStore]saveTask:task error:&error];				
				break;
			case 10://url
				url = [NSURL URLWithString:value];
				if(url){
					task.url = url;
					success = [[CalCalendarStore defaultCalendarStore]saveTask:task error:&error];	
				}
				break;
				
			default:
				break;
		}		
		
	}
	
	if(error)	
	{
		success = [error code];
		NSLog(@"can't update task: %@", [error localizedDescription]);
	}
	
	[uid release];
	[key release];
	[value release];	
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void iCal_Get_task_property(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	// --- write the code of iCal_Get_task_property here...

	int success = 0;
	
	NSString *uid = Param1.copyUTF16String();
	NSString *key = Param2.copyUTF16String();
	
	CalTask *task = [[CalCalendarStore defaultCalendarStore]taskWithUID:uid];
	
	NSArray *taskProperties = [NSArray arrayWithObjects:
							   @"dueDate", @"isCompleted", 
							   @"priority", @"completedDate" ,
							   @"hasAlarm", @"nextAlarmDate", 
							   @"calendar", @"dateStamp", 
							   @"notes", @"title", 
							   @"url", nil];
	
	if(task)
	{
		NSUInteger pid = [taskProperties indexOfObject:key];
		
		switch (pid)
		{
			case 0://dueDate
				Param3.setUTF16String([task.dueDate description]);
				success = 1;
				break;
			case 1://isCompleted
				if(task.isCompleted)
				{
					Param3.setUTF16String(@"YES");	
				}else{
					Param3.setUTF16String(@"NO");		
				}	
				success = 1;	
				break;
			case 2://priority	
			//	Param3.setUTF16String([NSString stringWithFormat:@"%@", task.priority]);
				
				if(task.priority){
					Param3.setUTF16String([[NSNumber numberWithInt:task.priority]stringValue]);
					success = 1;
				}else{
					Param3.setUTF16String(@"0");
					success = 1;				
				}					
				break;
			case 3://completedDate	
				Param3.setUTF16String([task.completedDate description]);						
				success = 1;					
				break;
			case 4://hasAlarm	
				if(task.hasAlarm)
				{
					Param3.setUTF16String(@"YES");						
				}else{
					Param3.setUTF16String(@"NO");	
				}
				success = 1;				
				break;
			case 5://nextAlarmDate
				Param3.setUTF16String([task.nextAlarmDate description]);
				success = 1;											
				break;
			case 6://calendar
				Param3.setUTF16String([task.calendar uid]);						
				success = 1;	
				break;
			case 7://dateStamp
				Param3.setUTF16String([task.dateStamp description]);					
				success = 1;			
				break;																																																								
			case 8://notes
				Param3.setUTF16String(task.notes);								
				success = 1;		
				break;
			case 9://title	
				Param3.setUTF16String(task.title);						
				success = 1;		
				break;
			case 10://url
				Param3.setUTF16String([task.url absoluteString]);					
				success = 1;
				break;
				
			default:
				break;
		}		
		
	}
	
	[uid release];
	[key release];	
	
	if(success)
		Param3.toParamAtIndex(pParams, 3);
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void iCal_Remove_task(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	// --- write the code of iCal_Remove_task here...

	int success = 0;
	NSError *error = nil;
	
	NSString * taskId = Param1.copyUTF16String();
	
	CalTask *task = [[CalCalendarStore defaultCalendarStore]taskWithUID:taskId];
	
	if(task) success = [[CalCalendarStore defaultCalendarStore]removeTask:task error:&error];
	
	if(error){
		success = [error code];
		NSLog(@"can't remove task: %@", [error localizedDescription]);
	}
	
	[taskId release];

	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void iCal_Count_task_alarms(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	// --- write the code of iCal_Count_task_alarms here...
	
	int success = 0;
	NSError *error = nil;
	
	NSString *taskId = Param1.copyUTF16String();
	
	CalTask *task = [[CalCalendarStore defaultCalendarStore]taskWithUID:taskId];
	
	if(task){ 
		Param2.setIntValue([[task alarms]count]);
		success = 1;
	}else{
		success = [error code];
		NSLog(@"invalid task: %@", taskId);	
	}
	
	[taskId release];
	
	Param2.toParamAtIndex(pParams, 2);
	
	returnValue.setIntValue(success);		
	returnValue.setReturn(pResult);
}

void iCal_Get_task_alarm(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	// --- write the code of iCal_Get_task_alarm here...
	
	int success = 0;
	NSError *error = nil;
	
	NSString *taskId = Param1.copyUTF16String();
	
	CalTask *task = [[CalCalendarStore defaultCalendarStore]taskWithUID:taskId];
	
	if(task){ 
		int count = [[task alarms]count];
		int index = Param2.getIntValue();
		
		if((count >= Param2.getIntValue()) && (index > 0)){
			CalAlarm *alarm = [[task alarms]objectAtIndex:(NSUInteger)(index - 1)];
			NSString *alarmString = copyAlarmString(alarm);
			Param3.setUTF16String(alarmString);
			[alarmString release];
			success = 1;			
		}else{
			NSLog(@"invalid alarm index: %@", index);				
		}
		
	}else{
		success = [error code];
		NSLog(@"invalid task: %@", taskId);	
	}
	
	[taskId release];
	
	Param3.toParamAtIndex(pParams, 3);
	
	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);
}

void iCal_Remove_task_alarm(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	// --- write the code of iCal_Remove_task_alarm here...

	int success = 0;
	NSError *error = nil;
	
	NSString *taskId = Param1.copyUTF16String();
	
	CalTask *task = [[CalCalendarStore defaultCalendarStore]taskWithUID:taskId];
	
	if(task){ 
		int count = [[task alarms]count];
		int index = Param2.getIntValue();
		
		if((count >= Param2.getIntValue()) && (index > 0)){
			CalAlarm *alarm = [[task alarms]objectAtIndex:(NSUInteger)(index - 1)];
			[task removeAlarm:alarm];
			success = 1;			
		}else{
			NSLog(@"invalid alarm index: %@", index);				
		}
		
	}else{
		success = [error code];
		NSLog(@"invalid task: %@", taskId);	
	}
	
	[taskId release];	
	
	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);
}

void iCal_Set_task_alarm(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	
	// --- write the code of iCal_Set_task_alarm here...

	int success = 0;
	NSError *error = nil;
	
	NSString *taskId = Param1.copyUTF16String();
	NSString *dictionary = Param3.copyUTF16String();	
	
	CalTask *task = [[CalCalendarStore defaultCalendarStore]taskWithUID:taskId];
	
	if(task){ 
		
		int count = [[task alarms]count];
		int index = Param2.getIntValue();
		
		if((count >= Param2.getIntValue()) && (index > 0)){
			
			NSMutableArray *alarms = [[task alarms]mutableCopy];		
			CalAlarm *newAlarm = getAlarmFromString(dictionary);
			
			if(newAlarm){
				
				[alarms replaceObjectAtIndex:(NSUInteger)(index - 1) withObject:newAlarm];
				[task removeAlarms:[task alarms]];
				[task addAlarms:alarms];
				success = [[CalCalendarStore defaultCalendarStore]saveTask:task error:&error];	
			}
			
			[alarms release];
			
		}else{
			NSLog(@"invalid alarm index: %@", index);				
		}
		
	}else{
		success = [error code];
		NSLog(@"invalid task: %@", taskId);	
	}
	
	[taskId release];
	[dictionary release];
	
	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);
}

// ----------------------------------- Calendar -----------------------------------


void iCal_Create_calendar(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	// --- write the code of iCal_Create_calendar here...

	NSError *error = nil;	
	
	NSString *title = Param1.copyUTF16String();
	NSString *dictionary = Param2.copyUTF16String();
	NSColor *color;
	
	CalCalendar *calendar = [CalCalendar calendar];
	
	calendar.title = title;
	
	color = getColorFromString(dictionary);
	if(color)	calendar.color = color;	
	
	[[CalCalendarStore defaultCalendarStore]saveCalendar:calendar error:&error];
	
	if(error)	
	{
		NSLog(@"can't save calendar: %@", [error localizedDescription]);
	}else{
		returnValue.setUTF16String([calendar uid]);
	}
	
	[title release];	
	[dictionary release];	
	
	returnValue.setReturn(pResult);	

}

void iCal_Set_calendar_property(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	
	// --- write the code of iCal_Set_calendar_property here...

	int success = 0;
	NSError *error = nil;
	
	NSString * uid = Param1.copyUTF16String();
	NSString * key = Param2.copyUTF16String();
	NSString * value = Param3.copyUTF16String();
	
	CalCalendar *calendar = [[CalCalendarStore defaultCalendarStore]calendarWithUID:uid];
	NSColor *color;
	
	NSArray *calendarProperties = [NSArray arrayWithObjects:
								   @"color", @"isEditable", 
								   @"notes", @"title", 
								   @"type", nil];
	
	if(calendar)
	{
		NSUInteger pid = [calendarProperties indexOfObject:key];
		
		switch (pid)
		{
			case 0://color
				
				color = getColorFromString(value);
				
				if(color){
					calendar.color = color;
					success = [[CalCalendarStore defaultCalendarStore]saveCalendar:calendar error:&error];
				}		
				break;
			case 1://isEditable (readonly)
				break;
			case 2://notes
				calendar.notes = value;			
				success = [[CalCalendarStore defaultCalendarStore]saveCalendar:calendar error:&error];	
				break;
			case 3://title 
				calendar.title = value;		
				success = [[CalCalendarStore defaultCalendarStore]saveCalendar:calendar error:&error];
				break;
			case 4://type (readonly)
				break;																
			default:
				break;
		}
	}
	
	if(error){
		success = [error code];
		NSLog(@"can't update calendar: %@", [error localizedDescription]);
	}
	
	[uid release];
	[key release];
	[value release];

	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void iCal_Get_calendar_property(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	// --- write the code of iCal_Get_calendar_property here...

	int success = 0;
	
	NSString * uid = Param1.copyUTF16String();
	NSString * key = Param2.copyUTF16String();
	
	CalCalendar *calendar = [[CalCalendarStore defaultCalendarStore]calendarWithUID:uid];
	
	NSArray *calendarProperties = [NSArray arrayWithObjects:
								   @"color", @"isEditable", @"notes", @"title", @"type", nil];
	
	if(calendar)
	{
		NSUInteger pid = [calendarProperties indexOfObject:key];
		NSString *colorString;
		
		switch (pid)
		{
			case 0://color
				colorString = copyColorString(calendar.color);
				Param3.setUTF16String(colorString);	
				[colorString release];					
				success = 1;		
				break;
			case 1://isEditable
				if(calendar.isEditable)
				{
					Param3.setUTF16String(@"YES");	
				}else{
					Param3.setUTF16String(@"NO");		
				}
				success = 1;								
				break;
			case 2://notes
				Param3.setUTF16String(calendar.notes);					
				success = 1;					
				break;
			case 3://title
				Param3.setUTF16String(calendar.title);				
				success = 1;					
				break;
			case 4://type
				Param3.setUTF16String(calendar.type);
				success = 1;				
				break;																
			default:
				break;
		}
	}
	
	[uid release];
	[key release];	
	
	if(success)
		Param3.toParamAtIndex(pParams, 3);
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void iCal_Remove_calendar(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	// --- write the code of iCal_Remove_calendar here...

	int success = 0;
	NSError *error = nil;
	
	NSString * calendarId = Param1.copyUTF16String();
	CalCalendar *calendar = [[CalCalendarStore defaultCalendarStore]calendarWithUID:calendarId];
	
	if(calendar) success = [[CalCalendarStore defaultCalendarStore]removeCalendar:calendar error:&error];
	
	if(error)	
	{
		success = [error code];
		NSLog(@"can't remove calendar: %@", [error localizedDescription]);
	}
	
	[calendarId release];	
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

// -------------------------------- Calendar Store --------------------------------


void iCal_QUERY_EVENT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	ARRAY_TEXT Param3;
	ARRAY_TEXT Param4;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	// --- write the code of iCal_QUERY_EVENT here...

	NSString *startDateString = Param1.copyUTF16String();
	NSString *endDateString = Param2.copyUTF16String();
	
	NSMutableArray *calendars = [[NSMutableArray alloc]init];
	
	unsigned int i;	
	CalCalendar *calendar;
	NSDate *startDate = [NSDate dateWithString:startDateString];
	NSDate *endDate = [NSDate dateWithString:endDateString];	
	
	if((startDate) && (endDate))
	{
		for(i = 0; i < Param3.getSize(); i++)
		{
			CUTF16String calendarId;
			Param3.copyUTF16StringAtIndex(&calendarId, i);
			NSString *c = [[NSString alloc]initWithCharacters:(const unichar *)calendarId.c_str() length:calendarId.length()];
			calendar = [[CalCalendarStore defaultCalendarStore]calendarWithUID:c];
			if(calendar) [calendars addObject:calendar];
			[c release];
		}
		
		NSPredicate *predicate = [CalCalendarStore eventPredicateWithStartDate:startDate endDate:endDate calendars:calendars];
		
		Param4.appendUTF16String(@"");
		
		if(predicate)
		{
			NSArray *events = [[CalCalendarStore defaultCalendarStore]eventsWithPredicate:predicate];
			
			for(i = 0; i < [events count]; i++)
			{
				Param4.appendUTF16String([[events objectAtIndex:i]uid]);
			}
		}					
	}
	
	[calendars release];	
	[startDateString release];
	[endDateString release];		
	
	Param4.toParamAtIndex(pParams, 4);
}

void iCal_GET_CALENDAR_LIST(sLONG_PTR *pResult, PackagePtr pParams)
{
	ARRAY_TEXT Param1;
	ARRAY_TEXT Param2;

	// --- write the code of iCal_GET_CALENDAR_LIST here...

	NSArray *calendars = [[CalCalendarStore defaultCalendarStore]calendars];
	
	unsigned int i;

	Param1.appendUTF16String(@"");
	Param2.appendUTF16String(@"");		
	
	for(i = 0; i < [calendars count]; i++)
	{
		Param1.appendUTF16String([[calendars objectAtIndex:i]uid]);
		Param2.appendUTF16String([[calendars objectAtIndex:i]title]);		
	}
	
	Param1.toParamAtIndex(pParams, 1);
	Param2.toParamAtIndex(pParams, 2);
}

void iCal_QUERY_TASK(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT Param2;
	ARRAY_TEXT Param3;
	C_LONGINT Param4;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param4.fromParamAtIndex(pParams, 4);
	
	// --- write the code of iCal_QUERY_TASK here...

	NSString *dueDateString = Param1.copyUTF16String();
	NSDate *dueDate = [NSDate dateWithString:dueDateString];
	
	NSMutableArray *calendars = [[NSMutableArray alloc]init];

	unsigned int i;		
	CalCalendar *calendar;
	
	for(i = 0; i < Param2.getSize(); i++){
		CUTF16String theCalendar;
		Param2.copyUTF16StringAtIndex(&theCalendar, i);
		NSString *calendarId = [[NSString alloc]initWithCharacters:(const unichar *)theCalendar.c_str() length:theCalendar.length()];
		calendar = [[CalCalendarStore defaultCalendarStore]calendarWithUID:calendarId];
		[calendarId release];
		
		if(calendar) [calendars addObject:calendar];
	}		
	
	NSPredicate *predicate;
	
	switch (Param4.getIntValue()) {
		case 1:
			if(dueDate){	
				predicate = [CalCalendarStore taskPredicateWithTasksCompletedSince:dueDate calendars:calendars];
			}else{
				predicate = [CalCalendarStore taskPredicateWithTasksCompletedSince:[NSDate distantPast] calendars:calendars];
			} 
			break;
		default:
			if(dueDate){					
				predicate = [CalCalendarStore taskPredicateWithUncompletedTasksDueBefore:dueDate calendars:calendars]; 		
			}else{
				predicate = [CalCalendarStore taskPredicateWithUncompletedTasks:calendars]; 					
			}
			break;
	}		
	
	Param3.appendUTF16String(@"");
			
	if(predicate){
		NSArray *tasks = [[CalCalendarStore defaultCalendarStore]tasksWithPredicate:predicate];
		
		for(i = 0; i < [tasks count]; i++){
			Param3.appendUTF16String([[tasks objectAtIndex:i]uid]);
		}
	}	
	
	[calendars release];
	[dueDateString release];	
	
	Param3.toParamAtIndex(pParams, 3);
}

// ----------------------------------- Type Cast ----------------------------------

void iCal_Make_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_DATE Param1;
	C_TIME Param2;
	C_TEXT Param3;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	// --- write the code of iCal_Make_date here...

	PA_Date date;
	date.fYear = Param1.getYear();
	date.fMonth = Param1.getMonth();
	date.fDay = Param1.getDay();	

	int seconds = Param2.getSeconds();
	NSString *name = Param3.copyUTF16String();
	
	NSString *description = copyDateTimeZoneString(&date, seconds, name);
	
	returnValue.setUTF16String(description);
	returnValue.setReturn(pResult);
	
	[description release];
	[name release];

}

void iCal_GET_DATE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT Param4;

	Param1.fromParamAtIndex(pParams, 1);

	// --- write the code of iCal_GET_DATE here...

	NSString *dateString = Param1.copyUTF16String();
	
	PA_Date date;
	int time = 0;
	int offset = 0;
	
	getDateTimeOffsetFromString(dateString, &date, &time, &offset);
	
	Param2.setYearMonthDay(date.fYear, date.fMonth, date.fDay);
	Param3.setSeconds(time);
	Param4.setIntValue(offset);
	
	[dateString release];	
	
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	Param4.toParamAtIndex(pParams, 4);
	
}

void iCal_Make_color(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_REAL Param1;
	C_REAL Param2;
	C_REAL Param3;
	C_REAL Param4;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);

	// --- write the code of iCal_Make_color here...

	float red = Param1.getDoubleValue();
	float green = Param2.getDoubleValue();
	float blue = Param3.getDoubleValue();
	float alpha = Param4.getDoubleValue();
	
	NSColor *color = [NSColor colorWithDeviceRed:red green:green blue:blue alpha:alpha];
	NSString *colorString = copyColorString(color);
	
	returnValue.setUTF16String(colorString);	
	returnValue.setReturn(pResult);
	
	[colorString release];

}

void iCal_GET_COLOR(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_REAL Param2;
	C_REAL Param3;
	C_REAL Param4;
	C_REAL Param5;

	Param1.fromParamAtIndex(pParams, 1);

	// --- write the code of iCal_GET_COLOR here...

	NSString *colorString = Param1.copyUTF16String();
	NSColor *color = getColorFromString(colorString);
	
	Param2.setDoubleValue((double)[color redComponent]);
	Param3.setDoubleValue((double)[color greenComponent]);
	Param4.setDoubleValue((double)[color blueComponent]);
	Param5.setDoubleValue((double)[color alphaComponent]);
	
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	Param4.toParamAtIndex(pParams, 4);
	Param5.toParamAtIndex(pParams, 5);
	
	[colorString release];
	
}

void iCal_Make_color_from_index(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	// --- write the code of iCal_Make_color_from_index here...

	NSColor *color = getColorIndex(Param1.getIntValue());
	NSString *colorString = copyColorString(color);
	
	returnValue.setUTF16String(colorString);	
	returnValue.setReturn(pResult);

	[colorString release];	
}

// -------------------------------- Recurrence Rule -------------------------------


void iCal_Remove_event_recurrence(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	// --- write the code of iCal_Remove_event_recurrence here...

	int success = 0;
	
	NSString *eventId = Param1.copyUTF16String();
	
	CalEvent *event = [[CalCalendarStore defaultCalendarStore]eventWithUID:eventId occurrence:nil];
	
	if(event)
	{
		event.recurrenceRule = nil;
		success = [[CalCalendarStore defaultCalendarStore]saveEvent:event span:CalSpanAllEvents error:NULL];
	}
	
	[eventId release];

	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void iCal_Set_event_recurrence(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT Param3;
	C_TEXT Param4;
	C_TEXT Param5;
	C_TEXT Param6;
	C_TEXT Param7;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);
	Param6.fromParamAtIndex(pParams, 6);
	Param7.fromParamAtIndex(pParams, 7);

	// --- write the code of iCal_Set_event_recurrence here...

	int success = 0;
	NSError *error = nil;
	
	NSString *uid = Param1.copyUTF16String();
	NSString *type = Param2.copyUTF16String();
	NSUInteger interval = Param3.getIntValue();
	NSString *dateString = Param4.copyUTF16String();
	NSString *param1 = Param5.copyUTF16String();	
	NSString *param2 = Param6.copyUTF16String();		
	NSString *param3 = Param7.copyUTF16String();
	
	
	NSDate *date = [NSDate dateWithString:dateString];
	
	CalEvent *event = [[CalCalendarStore defaultCalendarStore]eventWithUID:uid occurrence:nil];
	
	NSArray *ruleTypes = [NSArray arrayWithObjects:
						  @"Daily", @"Weekly", @"Monthly", @"Yearly", nil];
	
	if(event)
	{
		NSUInteger pid = [ruleTypes indexOfObject:type];
		CalRecurrenceRule *rule;	
		NSArray *days;
		NSArray *months;
		
		switch (pid)
		{
			case 0://Daily
				if(date)
				{
					rule = [[CalRecurrenceRule alloc]initDailyRecurrenceWithInterval:interval end:[CalRecurrenceEnd recurrenceEndWithEndDate:date]];
				}else{				
					if([dateString length])
					{
						rule = [[CalRecurrenceRule alloc]initDailyRecurrenceWithInterval:interval end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:[dateString integerValue]]];
					}else{
						rule = [[CalRecurrenceRule alloc]initDailyRecurrenceWithInterval:interval end:nil];						
					}
				}
				event.recurrenceRule = rule;
				success = [[CalCalendarStore defaultCalendarStore]saveEvent:event span:CalSpanAllEvents error:&error];			
				[rule release];
				break;
			case 1://Weekly					
				days = [param1 componentsSeparatedByString:@","];
				if([days count])
				{
					if(date)
					{
						rule = [[CalRecurrenceRule alloc]initWeeklyRecurrenceWithInterval:interval forDaysOfTheWeek:days end:[CalRecurrenceEnd recurrenceEndWithEndDate:date]];
					}else{
						if([dateString length])
						{
							rule = [[CalRecurrenceRule alloc]initWeeklyRecurrenceWithInterval:interval forDaysOfTheWeek:days end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:[dateString integerValue]]];		
						}else{
							rule = [[CalRecurrenceRule alloc]initWeeklyRecurrenceWithInterval:interval forDaysOfTheWeek:days end:nil];					
						}							
					}					
				}else{
					if(date)
					{
						rule = [[CalRecurrenceRule alloc]initWeeklyRecurrenceWithInterval:interval end:[CalRecurrenceEnd recurrenceEndWithEndDate:date]];
					}else{
						if([dateString length])
						{
							rule = [[CalRecurrenceRule alloc]initWeeklyRecurrenceWithInterval:interval end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:[dateString integerValue]]];		
						}else{
							rule = [[CalRecurrenceRule alloc]initWeeklyRecurrenceWithInterval:interval end:nil];					
						}							
					}					
				}				
				event.recurrenceRule = rule;
				success = [[CalCalendarStore defaultCalendarStore]saveEvent:event span:CalSpanAllEvents error:&error];			
				[rule release];
				break;
			case 2://Monthly
				days = [param1 componentsSeparatedByString:@","];	
				if([days count])
				{
					if(date)
					{
						rule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:interval forDaysOfTheMonth:days end:[CalRecurrenceEnd recurrenceEndWithEndDate:date]];
					}else{
						if([dateString length])
						{
							rule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:interval forDaysOfTheMonth:days end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:[dateString integerValue]]];		
						}else{
							rule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:interval forDaysOfTheMonth:days end:nil];					
						}							
					}					
				}else{
					
					if(([param1 length])&&([param2 length]))
					{
						
						if(date)
						{
							rule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:interval forDayOfTheWeek:[param1 integerValue] forWeekOfTheMonth:[param2 integerValue] end:[CalRecurrenceEnd recurrenceEndWithEndDate:date]];
						}else{
							if([dateString length])
							{
								rule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:interval forDayOfTheWeek:[param1 integerValue] forWeekOfTheMonth:[param2 integerValue] end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:[dateString integerValue]]];		
							}else{
								rule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:interval forDayOfTheWeek:[param1 integerValue] forWeekOfTheMonth:[param2 integerValue] end:nil];					
							}							
						}
						
					}else{
						
						if(date)
						{
							rule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:interval end:[CalRecurrenceEnd recurrenceEndWithEndDate:date]];
						}else{
							if([dateString length])
							{
								rule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:interval end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:[dateString integerValue]]];		
							}else{
								rule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:interval end:nil];					
							}							
						}
					}											
				}				
				
			case 3://Yearly
				days = [param1 componentsSeparatedByString:@","];
				months = [param3 componentsSeparatedByString:@","];
				
				if([months count])
				{
					
					if(date)
					{
						rule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:interval forDayOfTheWeek:[param1 integerValue] forWeekOfTheMonth:[param2 integerValue] forMonthsOfTheYear:months end:[CalRecurrenceEnd recurrenceEndWithEndDate:date]];
					}else{
						if([dateString length])
						{
							rule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:interval forDayOfTheWeek:[param1 integerValue] forWeekOfTheMonth:[param2 integerValue] forMonthsOfTheYear:months end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:[dateString integerValue]]];		
						}else{
							rule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:interval forDayOfTheWeek:[param1 integerValue] forWeekOfTheMonth:[param2 integerValue] forMonthsOfTheYear:months end:nil];					
						}							
					}					
					
				}else{
					
					if([days count])
					{
						if(date)
						{
							rule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:interval forMonthsOfTheYear:days end:[CalRecurrenceEnd recurrenceEndWithEndDate:date]];
						}else{
							if([dateString length])
							{
								rule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:interval forMonthsOfTheYear:days end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:[dateString integerValue]]];		
							}else{
								rule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:interval forMonthsOfTheYear:days end:nil];					
							}							
						}					
					}else{
						
						if(date)
						{
							rule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:interval end:[CalRecurrenceEnd recurrenceEndWithEndDate:date]];
						}else{
							if([dateString length])
							{
								rule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:interval end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:[dateString integerValue]]];		
							}else{
								rule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:interval end:nil];					
							}							
						}											
					}				
					
				}					
				
				event.recurrenceRule = rule;
				success = [[CalCalendarStore defaultCalendarStore]saveEvent:event span:CalSpanAllEvents error:&error];			
				[rule release];															
				break;
		}		
		
	}
	
	if(error)
	{
		success = [error code];
		NSLog(@"can't update event: %@", [error localizedDescription]);
	}	
	
	[uid release];
	[type release];	
	[dateString release];
	[param1 release];
	[param2 release];
	[param3 release];
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

// ------------------------------------- Alarm ------------------------------------

void iCal_Make_alarm(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;

	// --- write the code of iCal_Make_alarm here...

	CalAlarm *alarm = [CalAlarm alarm];
	NSString *alarmString = copyAlarmString(alarm);

	returnValue.setUTF16String(alarmString);
	returnValue.setReturn(pResult);
	
	[alarmString release];
	
}

void iCal_Get_alarm_property(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	// --- write the code of iCal_Get_alarm_property here...

	int success = 0;
	
	NSString *dictionary = Param1.copyUTF16String();
	NSString *key = Param2.copyUTF16String();
	
	CalAlarm *alarm = getAlarmFromString(dictionary);
	
	NSArray *alarmProperties = [NSArray arrayWithObjects:
								@"action", @"absoluteTrigger", 
								@"emailAddress", @"relativeTrigger",
								@"sound", @"url", nil];
	
	if(alarm){
		
		NSUInteger pid = [alarmProperties indexOfObject:key];
		
		switch (pid){
				
			case 0://action	
				if(alarm.action){
					Param3.setUTF16String(alarm.action);
					success = 1;	
				}				
				break;
			case 1://absoluteTrigger	
				if(alarm.absoluteTrigger){
					Param3.setUTF16String([alarm.absoluteTrigger description]);
					success = 1;					
				}	
				break;
			case 2://emailAddress	
				if(alarm.emailAddress){
					Param3.setUTF16String(alarm.emailAddress);
					success = 1;					
				}
				break;
			case 3://relativeTrigger
				if(alarm.relativeTrigger){
					Param3.setUTF16String([NSString stringWithFormat:@"%@", alarm.relativeTrigger]);
					success = 1;					
				}
				break;
			case 4://sound	
				if(alarm.sound){
					Param3.setUTF16String(alarm.sound);
					success = 1;
				}
				break;	
			case 5://url
				if(alarm.url){
					Param3.setUTF16String([alarm.url absoluteString]);
					success = 1;	
				}
				break;																				
		}		
	}
	
	[dictionary release];
	[key release];	
	
	if(success)
		Param3.toParamAtIndex(pParams, 3);
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);

}

void iCal_Set_alarm_property(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	// --- write the code of iCal_Set_alarm_property here...

	int success = 0;

	NSString *dictionary = Param1.copyUTF16String();
	NSString *key = Param2.copyUTF16String();
	NSString *value = Param3.copyUTF16String();
	
	CalAlarm *alarm = getAlarmFromString(dictionary);
	
	NSArray *alarmProperties = [NSArray arrayWithObjects:
								@"action", @"absoluteTrigger", 
								@"emailAddress", @"relativeTrigger" ,
								@"sound", @"url", nil];
	
	if(alarm){
		
		NSUInteger pid = [alarmProperties indexOfObject:key];
		NSDate *d = nil;
		NSURL *u = nil;
		
		switch (pid){
				
			case 0://action	
				alarm.action = value;
				success = 1;
				break;
			case 1://absoluteTrigger
				d = [NSDate dateWithString:value];
				if(d){
					alarm.absoluteTrigger = d;
					success = 1;
				}
				break;
			case 2://emailAddress	
				alarm.emailAddress = value;		
				success = 1;
				break;
			case 3://relativeTrigger
				alarm.relativeTrigger = [value doubleValue];		
				success = 1;	
				break;
			case 4://sound	
				alarm.sound = value;		
				success = 1;	
				break;	
			case 5://url
				u = [[NSURL alloc]initWithString:value];
					if(u){
						if([u isFileURL]){
							alarm.url = u;
							success = 1;
						}
					[u release];
				}
				break;																				
		}		
	}

	[dictionary release];
	dictionary = copyAlarmString(alarm);
	Param1.setUTF16String(dictionary);
	Param1.toParamAtIndex(pParams, 1);
	[dictionary release];	

	[key release];
	[value release];
	
	returnValue.setIntValue(success);		
	returnValue.setReturn(pResult);

}

void iCal_Add_alarm_to_event(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	// --- write the code of iCal_Add_alarm_to_event here...
	
	int success = 0;
	NSError *error = nil;
	
	NSString *eventId = Param1.copyUTF16String();
	NSString *dictionary = Param2.copyUTF16String();
	
	CalEvent *event = [[CalCalendarStore defaultCalendarStore]eventWithUID:eventId occurrence:nil];	
	CalAlarm *alarm = getAlarmFromString(dictionary);
	
	if(event){		
		[event addAlarm:alarm];
		success = [[CalCalendarStore defaultCalendarStore]saveEvent:event span:CalSpanThisEvent error:&error];
	}
	
	if(error){
		success = [error code];
		NSLog(@"can't update event: %@", [error localizedDescription]);
	}
	
	[eventId release];
	[dictionary release];
	
	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);
}

void iCal_Add_alarm_to_task(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	// --- write the code of iCal_Add_alarm_to_task here...

	int success = 0;
	NSError *error = nil;
	
	NSString *taskId = Param1.copyUTF16String();
	NSString *dictionary = Param2.copyUTF16String();
	
	CalTask *task = [[CalCalendarStore defaultCalendarStore]taskWithUID:taskId];	
	CalAlarm *alarm = getAlarmFromString(dictionary);
	
	if(task){
		[task addAlarm:alarm];
		success = [[CalCalendarStore defaultCalendarStore]saveTask:task error:&error];
	}
	
	if(error){
		success = [error code];
		NSLog(@"can't update task: %@", [error localizedDescription]);
	}
	
	[taskId release];
	[dictionary release];		
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

// ---------------------------------- Application ---------------------------------


void iCal_TERMINATE(sLONG_PTR *pResult, PackagePtr pParams)
{
	// --- write the code of iCal_TERMINATE here...
	
	//requires 10.6 or later
	
	if(NSClassFromString(@"NSRunningApplication")){
		NSArray *array = [NSRunningApplication runningApplicationsWithBundleIdentifier:@"com.apple.iCal"];
		if([array count]) [(NSRunningApplication *)[array objectAtIndex:0] terminate];
	}
	
}

void iCal_LAUNCH(sLONG_PTR *pResult, PackagePtr pParams)
{
	// --- write the code of iCal_LAUNCH here...
	
	[[NSWorkspace sharedWorkspace]launchApplication:@"iCal"];	
	
}

// ---------------------------------- iCal Direct ---------------------------------

void iCal_SHOW_EVENT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	// --- write the code of iCal_SHOW_EVENT here...
	
	NSString *eventId = Param1.copyUTF16String();
	
	appleScriptExecuteFunction(@"show_event", @"show_event", eventId, nil, nil);
	
	[eventId release];
	
}

void iCal_SHOW_TASK(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	// --- write the code of iCal_SHOW_TASK here...
	
	NSString *taskId = Param1.copyUTF16String();
	
	appleScriptExecuteFunction(@"show_task", @"show_task", taskId, nil, nil);
	
	[taskId release];	
	
}

void iCal_SET_VIEW(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	// --- write the code of iCal_SET_VIEW here...
	
	switch (Param1.getIntValue()) {
		case 0:
			appleScriptExecuteFunction(@"switch_view", @"switch_view", @"Day", nil, nil);
			break;
		case 1:
			appleScriptExecuteFunction(@"switch_view", @"switch_view", @"Week", nil, nil);
			break;
		case 2:
			appleScriptExecuteFunction(@"switch_view", @"switch_view", @"Month", nil, nil);
			break;			
		default:
			break;
	}
	
}

void iCal_SHOW_DATE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_DATE Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	// --- write the code of iCal_SHOW_DATE here...
	
	NSString *yearValue = [[NSNumber numberWithShort:Param1.getYear()]stringValue];
	NSString *monthValue = [[NSNumber numberWithShort:Param1.getMonth()]stringValue];
	NSString *dayValue = [[NSNumber numberWithShort:Param1.getDay()]stringValue];	
	
	appleScriptExecuteFunction(@"show_date", @"show_date", yearValue, monthValue, dayValue);
	
}

void iCal_app_Get_task_property(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	// --- write the code of iCal_app_Get_task_property here...

	int success = 0;
	
	NSString *returnString = nil;	
	NSString *taskId = Param1.copyUTF16String();
	NSString *taskPropertyKey = Param2.copyUTF16String();	
	
	NSArray *taskProperties = [NSArray arrayWithObjects:
								@"completedDate", @"dueDate", 
								@"priority", @"sequence", 
								@"stampDate" ,@"title", 
								@"notes", @"url", nil];

	NSUInteger pid = [taskProperties indexOfObject:taskPropertyKey];
	
	switch (pid){
			
		case 2://priority	
		case 3://sequence
		case 5://title
		case 6://notes	
		case 7://url				
			returnString = appleScriptExecuteFunction(@"get_task_property", @"get_task_property", taskId, taskPropertyKey, nil);
			if(returnString){
				success = 1;
				Param3.setUTF16String(returnString);
			}
			break;
			
		case 0://completedDate
		case 1://dueDate	
		case 4://stampDate
			returnString = appleScriptExecuteFunction(@"get_task_property", @"get_task_property", taskId, taskPropertyKey, nil);
			
			if(returnString){
				
				NSDate *currentDate = [[NSDate alloc]init];
				NSString *ds = [currentDate description];
				
				if([ds length] > 19){
					
					NSDate *d = [NSDate dateWithString:[returnString stringByAppendingString:[ds substringFromIndex:19]]];
					
					if(d){
						success = 1;					
						Param3.setUTF16String([d description]);
					}
					
					[currentDate release];
					
				}
				
			}
			break;			
			
		default:
			break;
			
	}		
	
	[taskId release];
	[taskPropertyKey release];
	
	if(success)
		Param3.toParamAtIndex(pParams, 3);
	
	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);
	
}

void iCal_app_Get_event_property(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	// --- write the code of iCal_app_Get_event_property here...

	int success = 0;
	
	NSString *returnString = nil;	
	NSString *eventId = Param1.copyUTF16String();
	NSString *eventPropertyKey = Param2.copyUTF16String();	
	
	NSArray *eventProperties = [NSArray arrayWithObjects:
								@"notes", @"startDate", 
								@"endDate", @"isAllDay", 
								@"recurrence" ,@"dateStamp", 
								@"sequence", @"status", 
								@"title", @"location", 
								@"url", @"calendar", nil];
	
	NSUInteger pid = [eventProperties indexOfObject:eventPropertyKey];
	
	switch (pid){
						
		case 0://notes	
		case 3://isAllDay	
		case 4://recurrence
		case 6://sequence
		case 7://status
		case 8://title
		case 9://location	
		case 10://url				
			returnString = appleScriptExecuteFunction(@"get_event_property", @"get_event_property", eventId, eventPropertyKey, nil);
			if(returnString){
				success = 1;
				Param3.setUTF16String(returnString);
			}
			break;	

		case 1://startDate
		case 2://endDate	
		case 5://dateStamp				
			returnString = appleScriptExecuteFunction(@"get_event_property", @"get_event_property", eventId, eventPropertyKey, nil);

			if(returnString){

				NSDate *currentDate = [[NSDate alloc]init];
				NSString *ds = [currentDate description];
				
				if([ds length] > 19){
				
					NSDate *d = [NSDate dateWithString:[returnString stringByAppendingString:[ds substringFromIndex:19]]];
	
					if(d){
						success = 1;					
						Param3.setUTF16String([d description]);
					}
					
				[currentDate release];
					
				}

			}
			break;			
		case 11://calendar	
			returnString = appleScriptExecuteFunction(@"get_event_property", @"get_event_property", eventId, eventPropertyKey, nil);
			if(returnString){
				success = 1;
				Param3.setUTF16String(returnString);
			}			
			break;
		default:
			break;
			
	}		

	[eventId release];
	[eventPropertyKey release];
	
	if(success)
		Param3.toParamAtIndex(pParams, 3);
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
	
}

void iCal_Set_notification_method(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	// --- write the code of iCal_Set_notification_listner here...
	
	int success = 0;
	
	NSString *methodName = Param1.copyUTF16String();
	
	if(!Param1.getUTF16Length()){
		
		if(listener)
		{
			[listener terminate];
			success = 1;
		}
		
	}else{
		
		int methodId = PA_GetMethodID((PA_Unichar *)Param1.getUTF16StringPtr());
		
		if(methodId){
			
			success = 1;
			
			if(!listener){		
				
				int iCalListenerProcessNumber = PA_NewProcess((void *)iCalListenerLoop, -512*1024, @"$iCal Notification Process");
				
				listener = [[iCalListener alloc]
							initWithMethodName:methodName
							methodId:[NSNumber numberWithInt:methodId]
							processNumber:[NSNumber numberWithInt:iCalListenerProcessNumber]];
				
				[[NSNotificationCenter defaultCenter]
				 addObserver:listener 
				 selector:@selector(eventsChanged:)
				 name:CalEventsChangedExternallyNotification 
				 object:[CalCalendarStore defaultCalendarStore]];	
				
				[[NSNotificationCenter defaultCenter]
				 addObserver:listener 
				 selector:@selector(tasksChanged:)
				 name:CalTasksChangedExternallyNotification 
				 object:[CalCalendarStore defaultCalendarStore]];	
				
				[[NSNotificationCenter defaultCenter]
				 addObserver:listener 
				 selector:@selector(calendarsChanged:)
				 name:CalCalendarsChangedExternallyNotification 
				 object:[CalCalendarStore defaultCalendarStore]];
				
			}else{
				listener.listenerMethodName = methodName;				
				listener.listenerMethodId = [NSNumber numberWithInt:methodId];				
			}
			
		}
		
	}
	
	[methodName release];
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void iCal_Get_notification_method(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	int success = 0;
	
	if(listener)
	{
		Param1.setUTF16String(listener.listenerMethodName);
		Param1.toParamAtIndex(pParams, 1);
		success = 1;		
	}
	
	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);
}
#endif
